[gd_scene load_steps=7 format=2]

[ext_resource path="res://assets/materials/GroundBricksMaterial.tres" type="Material" id=1]
[ext_resource path="res://assets/meshlibs/WallsTargets.tres" type="MeshLibrary" id=4]
[ext_resource path="res://scenes/OptionPanel.tscn" type="PackedScene" id=5]

[sub_resource type="GDScript" id=25]
script/source = "extends Spatial

onready var ground = $Ground
onready var walls_targets = $WallsTargets
onready var options = $CanvasLayer/OptionPanel
onready var box_path = preload(\"res://scenes/Box.tscn\")
onready var player_path = preload(\"res://scenes/Player.tscn\")
onready var bricks = load(\"res://assets/materials/GroundBricksMaterial.tres\")
onready var rock = load(\"res://assets/materials/GroundRockMaterial.tres\")

var player
var tile_size = 0
var grid_size = Vector3(32, 1, 24)
var target_grid = []
var grid = []
var materials = []

enum {WALL, TARGET, BOX, PLAYER}

# Called when the node enters the scene tree for the first time.
func _ready():
	if !G.is_save_file_loaded:
		load_from_save_file()
		G.is_save_file_loaded = true
		
	prepare_values()
	setup_grid()
	ground.set_surface_material(0, materials[G.wall_type])
	generate_walls_and_targets()
	generate_boxes()
	generate_player()
	count_boxes_on_target()


func load_from_save_file():
	if G.file.file_exists(\"user://save.txt\"):
		G.file.open(\"user://save.txt\", File.READ)
		G.data = parse_json(G.file.get_line())
		G.file.close()
		G.highest_reached_level = G.data[\"highest_reached_level\"]
		G.wall_type = G.data[\"wall_type\"]
		G.level = G.highest_reached_level


func prepare_values():
	G.pushes = 0
	G.boxes = 0
	G.on_target = 0
	G.pushes_player = []
	G.pushes_boxes = []
	tile_size = walls_targets.get_cell_size()
	materials = [bricks, rock]


func _process(_delta):
	if Input.is_action_just_pressed(\"options\"):
		options.visible = true
		get_tree().paused = true


func _on_OptionPanel_refresh():
	ground.set_surface_material(0, materials[G.wall_type])
	generate_walls_and_targets()


func setup_grid():
	for x in range(grid_size.x):
		target_grid.append([])
		grid.append([])
		for y in range(grid_size.y):
			target_grid[x].append([])
			grid[x].append([])
			for _z in range(grid_size.z):
				target_grid[x][y].append(null)
				grid[x][y].append(null)


func generate_walls_and_targets():
	for y in range(G.MAPS[G.level].size()):
		for z in range(G.MAPS[G.level][y].size()):
			for x in range(G.MAPS[G.level][y][z].size()):
				if G.MAPS[G.level][y][z][x] == 1:
					walls_targets.set_cell_item(x, y, z, G.wall_type, 0)
					grid[x][y][z] = WALL
				elif G.MAPS[G.level][y][z][x] == 2:
					walls_targets.set_cell_item(x, y, z, G.wall_type + 2, 0)
					target_grid[x][y][z] = TARGET


func generate_boxes():
	for pos in G.BOX_POSITIONS[G.level]:
		var box = box_path.instance()
		box.translation = walls_targets.map_to_world(pos.x, pos.y, pos.z)
		add_child(box)
		grid[pos.x][pos.y][pos.z] = BOX
		G.boxes += 1
	
	G.boxes_instances = get_tree().get_nodes_in_group(\"Boxes\")


func generate_player():
	var pos = G.PLAYER_POSITIONS[G.level]
	player = player_path.instance()
	player.translation = walls_targets.map_to_world(pos.x, pos.y, pos.z)
	add_child(player)
	grid[pos.x][pos.y][pos.z] = PLAYER

#called by player to know, if can move to the next cell
func is_valid_move(pos, direction):
	var own_pos = walls_targets.world_to_map(pos)
	var target_pos = own_pos + direction
	var behind_box_pos = target_pos + direction
	
	if target_pos.x < grid_size.x and target_pos.x >= 0:
		if target_pos.y < grid_size.y and target_pos.y >= 0:
			if target_pos.z < grid_size.z and target_pos.z >= 0:
				if grid[target_pos.x][target_pos.y][target_pos.z] == WALL:
					return false
				elif grid[target_pos.x][target_pos.y][target_pos.z] == BOX:
					return grid[behind_box_pos.x][behind_box_pos.y][behind_box_pos.z] == null
				else:
					return true
	return false

#called by the box to know, if the player is about to push it
func has_pusher(pos, direction):
	var own_pos = walls_targets.world_to_map(pos)
	var pusher_pos = own_pos - direction
	return grid[pusher_pos.x][pusher_pos.y][pusher_pos.z] == PLAYER

#called by player to know, if pushing a box
func is_pushing(pos, direction):
	var own_pos = walls_targets.world_to_map(pos)
	var box_pos = own_pos + direction
	return grid[box_pos.x][box_pos.y][box_pos.z] == BOX

#called by the box to know, if itÂ´s placed on a target
func is_on_target(pos):
	var own_pos = walls_targets.world_to_map(pos)
	return target_grid[own_pos.x][own_pos.y][own_pos.z] == TARGET

#called by the player at te end of a move to display nomber of boxes on target
func count_boxes_on_target():
	G.on_target = 0
	var boxes = get_tree().get_nodes_in_group(\"Boxes\")
	for box in boxes:
		if box.is_on_target():
			G.on_target += 1

#called by player and box to set their new positions in the grid
func update_child_pos(child_node):
	var grid_pos = walls_targets.world_to_map(child_node.pos)
	var last_pos = grid_pos - child_node.direction
	
	grid[last_pos.x][last_pos.y][last_pos.z] = null
	grid[grid_pos.x][grid_pos.y][grid_pos.z] = child_node.type

#called at undo move by player and box to set their last positions in the grid
func update_child_pos_undo(child_node):
	var grid_pos = walls_targets.world_to_map(child_node.pos)
	var last_pos = walls_targets.world_to_map(child_node.undo_pos)
	
	grid[last_pos.x][last_pos.y][last_pos.z] = null
	grid[grid_pos.x][grid_pos.y][grid_pos.z] = child_node.type
"

[sub_resource type="PlaneMesh" id=6]
material = ExtResource( 1 )
size = Vector2( 512, 384 )
subdivide_width = 32
subdivide_depth = 24

[sub_resource type="Skin" id=7]

[node name="Level" type="Spatial"]
script = SubResource( 25 )

[node name="Ground" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 256, 0, 192 )
mesh = SubResource( 6 )
skin = SubResource( 7 )
skeleton = NodePath("../../..")
material/0 = null

[node name="WallsTargets" type="GridMap" parent="."]
mesh_library = ExtResource( 4 )
cell_size = Vector3( 16, 16, 16 )
data = {
"cells": PoolIntArray(  )
}
__meta__ = {
"_editor_clip_": 0
}

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="OptionPanel" parent="CanvasLayer" instance=ExtResource( 5 )]
visible = false
margin_left = 128.0
margin_top = 256.0
margin_right = -384.0
margin_bottom = -256.0

[connection signal="refresh" from="CanvasLayer/OptionPanel" to="." method="_on_OptionPanel_refresh"]
